{"version":3,"sources":["components/WorldMap.js","data/country_vaccinations.csv","components/VaccinationData.js","components/DailyInformations.js","utils/Constants.js","components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["Map","centered","parentSelectedCountryCallback","svgRef","useRef","tooltipRef","countryNames","width","height","projection","d3","scale","translate","path","clicked","d","x","y","k","g","select","current","centroid","selectAll","classed","call","e","id","transition","duration","attr","style","useEffect","svg","tooltip","append","on","Promise","all","then","world","names","countries","topojson","objects","features","forEach","i","name","data","enter","this","html","datum","a","b","catch","err","console","log","className","ref","VaccinationData","parentCountryDataCallback","vaccinationData","Papa","parse","csvFile","download","step","row","push","complete","DailyInformations","countryData","currentDate","formatedDate","dateFormat","filteredCountryData","Array","fill","noDataAavailableString","undefined","length","find","Chart","filter","dates","map","totalVaccinations","peopleVaccinated","peopleFullyVaccinated","concat","datesData","React","c3","generate","size","bindto","columns","type","zoom","enabled","axis","label","text","position","tick","format","fit","values","rotate","multiline","padding","top","bottom","App","selectedCountry","useState","Date","setStartDate","currentCountryData","setCountryData","WorldMap","country","isSelected","rawData","toLowerCase","replace","includes","it","selected","onChange","date","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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,GAAD,OAAUA,ECXxB,KDW8D2B,OACf,IAA/BE,EAAoBK,SACzDL,EAAsB,IAAIC,MAAM,IAAIC,KAAK,KAS7C,sBAAKpB,UAAU,oCAAf,UACI,oBAAIA,UAAU,kBAAd,+BACA,sBAAKA,UAAU,oCAAf,UACI,kCAAI,kCCXe,eDWnB,IAA6CkB,EC3BpB,GD2B+EA,EC3B/E,GD2B0IG,IAAnK,OACA,kCAAI,kCCXW,WDWf,IAAyCH,EC3BpB,GD2B2EA,EC3B3E,GD2BkIG,IAAvJ,OACA,kCAAI,kCCXO,YDWX,IAAqCH,EC3BpB,GD2BuEA,EC3BvE,GD2B0HG,IAA3I,OACA,kCAAI,kCCXc,0BDWlB,IAA4CH,EC3BpB,GD2B8EA,EC3B9E,GD2BwIG,IAAhK,OACA,kCAAI,kCCXa,yBDWjB,IAA2CH,EC3BpB,GD2B6EA,EC3B7E,GD2BsIG,IAA7J,OACA,kCAAI,kCCXmB,+BDWvB,IAAiDH,EC3BpB,GD2BmFA,EC3BnF,GD2BkJG,IAA/K,OACA,kCAAI,kCCXkB,8BDWtB,IAAgDH,EC3BpB,GD2BkFA,EC3BlF,GD2BgJG,IAA5K,OACA,kCAAI,kCCXc,0BDWlB,IAA4CH,EC3BpB,GD2B8EA,EC3B9E,GD2BwIG,IAAhK,OACA,kCAAI,kCCX2B,mDDW/B,IAAyDH,EC3BpB,GD2B2FA,EC3B3F,GD2BkKG,IAAvM,OACA,kCAAI,kCCXyB,kDDW7B,IAAuDH,EC3BpB,GD2ByFA,EC3BzF,GD2B8JG,IAAjM,OACA,kCAAI,kCCX+B,wDDWnC,IAA6DH,EC3BpB,ID2B+FA,EC3B/F,ID2B2KG,IAApN,OACA,kCAAI,kCCX0B,+CDW9B,IAAwDH,EC3BpB,ID2B0FA,EC3B1F,ID2BiKG,IAArM,OACA,kCAAI,kCCXI,gBDWR,IAAkCH,EC3BpB,ID2BoEA,EC3BpE,ID2BoHG,IAAlI,OACA,kCAAI,kCCXO,mBDWX,IAAqCH,EC3BpB,ID2BuEA,EC3BvE,ID2B0HG,IAA3I,OACA,kCAAI,kCCXU,sBDWd,IAAwCH,EC3BpB,ID2B0EA,EC3B1E,ID2BgIG,IAApJ,e,2CEoDDI,G,OAvFD,SAAC,GAAqB,IAAnBX,EAAkB,EA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","file":"static/js/main.9d08b471.chunk.js","sourcesContent":["import React, { Component, useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\nimport * as d3 from \"d3\";\r\nimport * as topojson from \"topojson\";\r\n\r\nconst Map = ({ parentSelectedCountryCallback }) => {\r\n\r\n    const svgRef = useRef();\r\n    const tooltipRef = useRef();\r\n    var countryNames = [];\r\n\r\n    const width = 1000;\r\n    const height = 900;\r\n    var centered;\r\n\r\n    const projection = d3.geoMercator().scale(150)\r\n        .translate([width / 2, height / 2]);\r\n\r\n    const path = d3.geoPath(projection);\r\n\r\n    function clicked(d) {\r\n        var x, y, k;\r\n\r\n        var svg = select(svgRef.current);\r\n        const g = svg.select('#mapGroup');\r\n\r\n        if (d && centered !== d) {\r\n            var centroid = path.centroid(d);\r\n            x = centroid[0];\r\n            y = centroid[1];\r\n            k = 4;\r\n            centered = d;\r\n        } else {\r\n            x = width / 2;\r\n            y = height / 2;\r\n            k = 1;\r\n            centered = null;\r\n        }\r\n\r\n\r\n        g.selectAll(\"path\")\r\n            .classed(\"active\", centered && function (d) { return d === centered; })\r\n            .call(function (e) {\r\n                if (centered && function (d) { return d === centered; })\r\n                    parentSelectedCountryCallback(countryNames[d.id], true);\r\n                else\r\n                    parentSelectedCountryCallback(countryNames[d.id], false);\r\n            }); \r\n\r\n        g.transition()\r\n            .duration(750)\r\n            .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")scale(\" + k + \")translate(\" + -x + \",\" + -y + \")\")\r\n            .style(\"stroke-width\", 1.5 / k + \"px\");\r\n\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        var svg = select(svgRef.current);\r\n        var tooltip = select(tooltipRef.current);\r\n\r\n        svg.append(\"rect\")\r\n            .attr(\"id\", \"mapBackground\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .on(\"click\", clicked);\r\n\r\n        var g = svg.append('g').attr(\"id\", \"mapGroup\");\r\n\r\n\r\n        Promise.all([\r\n            d3.json(\"https://cdn.rawgit.com/mbostock/4090846/raw/d534aba169207548a8a3d670c9c2cc719ff05c47/world-110m.json\"),\r\n            d3.tsv(\"https://cdn.rawgit.com/mbostock/4090846/raw/d534aba169207548a8a3d670c9c2cc719ff05c47/world-country-names.tsv\"),\r\n        ]).then(([world, names]) => {\r\n\r\n            var countries = topojson.feature(world, world.objects.countries).features;\r\n\r\n            //map country names to IDs used on map\r\n            names.forEach(function (i) {\r\n                countryNames[i.id] = i.name;\r\n            });\r\n\r\n            g.append(\"g\")\r\n                .attr(\"class\", \"country\")\r\n                .selectAll(\".country\")\r\n                .data(countries)\r\n                .enter().append('path')\r\n                .attr(\"d\", path)\r\n                .attr(\"id\", function (d) { return d.id; })\r\n                .on('click', function (e, d) {\r\n                    clicked(d);\r\n                }).on(\"mouseover\", function (e, d) {\r\n                    d3.select(this).attr(\"fill\", \"grey\").attr(\"stroke-width\", 2);\r\n                    return tooltip.classed(\"hidden\", false).html(countryNames[d.id]);\r\n                })\r\n                .on(\"mousemove\", function (e, d) {\r\n                    tooltip.classed(\"hidden\", false)\r\n                        .style(\"top\", (e.y) + \"px\")\r\n                        .style(\"left\", (e.x + 10) + \"px\")\r\n                        .html(countryNames[d.id]);\r\n                })\r\n                .on(\"mouseout\", function (d, i) {\r\n                    d3.select(this).attr(\"fill\", \"#aaa\").attr(\"stroke-width\", 1);\r\n                    tooltip.classed(\"hidden\", true);\r\n                });\r\n\r\n            g.append(\"path\")\r\n                .datum(topojson.mesh(world, world.objects.countries, function (a, b) { return a !== b; }))\r\n                .attr(\"id\", \"country-borders\")\r\n                .attr(\"d\", path);\r\n\r\n\r\n\r\n        }).catch(err => console.log('Error loading or parsing data.'))\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"mapContainer\">\r\n            <svg ref={svgRef} width={width} height={height} className=\"worldMap\"> </svg>\r\n            <div ref={tooltipRef} className=\"mapTooltip\"></div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Map;","export default __webpack_public_path__ + \"static/media/country_vaccinations.1225a9ef.csv\";","import csvFile from '../data/country_vaccinations.csv'\r\nimport React, { useEffect } from \"react\";\r\nimport Papa from 'papaparse/papaparse.min';\r\n\r\nconst VaccinationData = ({ parentCountryDataCallback }) => {\r\n\r\n    useEffect(() => {\r\n\r\n        var vaccinationData = [];\r\n\r\n        Papa.parse(csvFile, {\r\n            download: true,\r\n            step: function (row) {\r\n                vaccinationData.push(row)\r\n            },\r\n            complete: function () {\r\n                parentCountryDataCallback(vaccinationData)\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div></div>\r\n    );\r\n}\r\n\r\nexport default VaccinationData;\r\n","import dateFormat from \"dateformat\";\r\nimport * as Constants from '../utils/Constants';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nconst DailyInformations = ({ countryData, currentDate }) => {\r\n\r\n    var formatedDate = dateFormat(currentDate, \"yyyy-mm-dd\");\r\n\r\n    var filteredCountryData = new Array(15).fill(\" \");\r\n\r\n    if (countryData === undefined || countryData.length === 0) {\r\n        filteredCountryData = new Array(15).fill(\" \")\r\n    }\r\n    else {\r\n        filteredCountryData = countryData.find((data) => data[Constants.DATE_COLUMN_INDEX] === formatedDate) // find first that matches date \r\n        if (filteredCountryData === undefined || filteredCountryData.length === 0) {\r\n            filteredCountryData = new Array(15).fill(\"\")\r\n        }\r\n    }\r\n\r\n    function noDataAavailableString() {\r\n        return Constants.NO_DATA_AVAILABLE + formatedDate\r\n    }\r\n\r\n    return (\r\n        <div className=\"row mt-5 countryDailyInformations\">\r\n            <h2 className=\"col-5 ml-3 mb-4\">Daily information</h2>\r\n            <div className=\"col-12 daily-informations-preview\">\r\n                <p> <b> {Constants.COUNTRY_NAME_COLUMN}</b> {filteredCountryData[Constants.COUNTRY_NAME_COLUMN_INDEX] ? filteredCountryData[Constants.COUNTRY_NAME_COLUMN_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.ISO_CODE_COLUMN}</b> {filteredCountryData[Constants.ISO_CODE_COLUMN_INDEX] ? filteredCountryData[Constants.ISO_CODE_COLUMN_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.DATE_COLUMN}</b> {filteredCountryData[Constants.DATE_COLUMN_INDEX] ? filteredCountryData[Constants.DATE_COLUMN_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.TOTAL_VACCINATIONS}</b> {filteredCountryData[Constants.TOTAL_VACCINATIONS_INDEX] ? filteredCountryData[Constants.TOTAL_VACCINATIONS_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.PEOPLE_VACCINATED}</b> {filteredCountryData[Constants.PEOPLE_VACCINATED_INDEX] ? filteredCountryData[Constants.PEOPLE_VACCINATED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.PEOPLE_FULLY_VACCINATED}</b> {filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_INDEX] ? filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.DAILY_VACCINATIONS_RAW}</b> {filteredCountryData[Constants.DAILY_VACCINATIONS_RAW_INDEX] ? filteredCountryData[Constants.DAILY_VACCINATIONS_RAW_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.DAILY_VACCINATIONS}</b> {filteredCountryData[Constants.DAILY_VACCINATIONS_INDEX] ? filteredCountryData[Constants.DAILY_VACCINATIONS_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.TOTAL_VACCIONATIONS_PER_HUNDRED}</b> {filteredCountryData[Constants.TOTAL_VACCIONATIONS_PER_HUNDRED_INDEX] ? filteredCountryData[Constants.TOTAL_VACCIONATIONS_PER_HUNDRED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.PEOPLE_VACCINATED_PER_HUNDRED}</b> {filteredCountryData[Constants.PEOPLE_VACCINATED_PER_HUNDRED_INDEX] ? filteredCountryData[Constants.PEOPLE_VACCINATED_PER_HUNDRED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.PEOPLE_FULLY_VACCINATED_PER_HUNDRED}</b> {filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_PER_HUNDRED_INDEX] ? filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_PER_HUNDRED_INDEX]  : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.DAILY_VACCINATIONS_PER_MILLION}</b> {filteredCountryData[Constants.DAILY_VACCINATIONS_PER_MILLION_INDEX] ? filteredCountryData[Constants.DAILY_VACCINATIONS_PER_MILLION_INDEX]  : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.VACCINES}</b> {filteredCountryData[Constants.VACCINES_INDEX] ? filteredCountryData[Constants.VACCINES_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.SOURCE_NAME}</b> {filteredCountryData[Constants.SOURCE_NAME_INDEX] ? filteredCountryData[Constants.SOURCE_NAME_INDEX] : noDataAavailableString()} </p>\r\n                <p> <b> {Constants.SOURCE_WEBSITE}</b> {filteredCountryData[Constants.SOURCE_WEBSITE_INDEX] ? filteredCountryData[Constants.SOURCE_WEBSITE_INDEX] : noDataAavailableString()} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyInformations;","export const COUNTRY_NAME_COLUMN_INDEX = 0;\r\nexport const ISO_CODE_COLUMN_INDEX = 1;\r\nexport const DATE_COLUMN_INDEX = 2;\r\nexport const TOTAL_VACCINATIONS_INDEX = 3;\r\nexport const PEOPLE_VACCINATED_INDEX = 4;\r\nexport const PEOPLE_FULLY_VACCINATED_INDEX = 5;\r\nexport const DAILY_VACCINATIONS_RAW_INDEX = 6;\r\nexport const DAILY_VACCINATIONS_INDEX = 7;\r\nexport const TOTAL_VACCIONATIONS_PER_HUNDRED_INDEX = 8;\r\nexport const PEOPLE_VACCINATED_PER_HUNDRED_INDEX = 9;\r\nexport const PEOPLE_FULLY_VACCINATED_PER_HUNDRED_INDEX = 10;\r\nexport const DAILY_VACCINATIONS_PER_MILLION_INDEX = 11;\r\nexport const VACCINES_INDEX = 12;\r\nexport const SOURCE_NAME_INDEX = 13;\r\nexport const SOURCE_WEBSITE_INDEX = 14;\r\n\r\nexport const COUNTRY_NAME_COLUMN = \"Country: \";\r\nexport const ISO_CODE_COLUMN = \"Iso: \";\r\nexport const DATE_COLUMN = \"Date: \";\r\nexport const TOTAL_VACCINATIONS = \"Total vaccinations: \";\r\nexport const PEOPLE_VACCINATED = \"People vaccinated: \";\r\nexport const PEOPLE_FULLY_VACCINATED = \"People fully vaccinated: \";\r\nexport const DAILY_VACCINATIONS_RAW = \"Daily vaccinations raw: \";\r\nexport const DAILY_VACCINATIONS = \"Daily vaccinations: \";\r\nexport const TOTAL_VACCIONATIONS_PER_HUNDRED = \"Total vaccinations per hundred (in percent): \";\r\nexport const PEOPLE_VACCINATED_PER_HUNDRED = \"People vaccinated per hundred (in percent): \";\r\nexport const PEOPLE_FULLY_VACCINATED_PER_HUNDRED = \"People fully vaccinated per hundred (in percent): \";\r\nexport const DAILY_VACCINATIONS_PER_MILLION = \"Daily vaccinations per million (in ppm): \";\r\nexport const VACCINES = \"Vaccines: \";\r\nexport const SOURCE_NAME = \"Source name: \";\r\nexport const SOURCE_WEBSITE = \"Source website: \";\r\nexport const NO_DATA_AVAILABLE = \"No data for \";","import React from \"react\";\r\nimport c3 from \"c3\";\r\nimport * as Constants from '../utils/Constants';\r\nimport 'c3/c3.css';\r\nimport dateFormat from \"dateformat\";\r\n\r\nconst Chart = ({ countryData }) => {\r\n\r\n    if (countryData !== undefined) {\r\n\r\n        var filteredCountryData = countryData // get only country data where parameters below exists\r\n            .filter(data =>\r\n                data[Constants.TOTAL_VACCINATIONS_INDEX] !== \"\" &&\r\n                data[Constants.TOTAL_VACCINATIONS_INDEX] !== undefined &&\r\n                data[Constants.PEOPLE_VACCINATED_INDEX] !== \"\" &&\r\n                data[Constants.PEOPLE_VACCINATED_INDEX] !== undefined &&\r\n                data[Constants.PEOPLE_FULLY_VACCINATED_INDEX] !== \"\" &&\r\n                data[Constants.PEOPLE_FULLY_VACCINATED_INDEX] !== undefined\r\n            )\r\n\r\n        var dates = filteredCountryData.map(countryData => countryData[Constants.DATE_COLUMN_INDEX])\r\n\r\n        var totalVaccinations = filteredCountryData\r\n            .map(data => data[Constants.TOTAL_VACCINATIONS_INDEX])\r\n\r\n        var peopleVaccinated = filteredCountryData\r\n            .map(data => data[Constants.PEOPLE_VACCINATED_INDEX])\r\n\r\n        var peopleFullyVaccinated = filteredCountryData\r\n            .map(data => data[Constants.PEOPLE_FULLY_VACCINATED_INDEX])\r\n\r\n\r\n        totalVaccinations = [\"Total vaccinations\"].concat(totalVaccinations)\r\n        peopleVaccinated = [\"People vaccinated\"].concat(peopleVaccinated)\r\n        peopleFullyVaccinated = [\"People fully vaccinated\"].concat(peopleFullyVaccinated)\r\n        var datesData = [\"x\"].concat(dates)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (countryData !== undefined) {\r\n            c3.generate({\r\n                size: {\r\n                    height: 600\r\n                },\r\n                bindto: \"#chart\",\r\n                data: {\r\n                    x: 'x',\r\n                    columns: [\r\n                        datesData,\r\n                        totalVaccinations,\r\n                        peopleVaccinated,\r\n                        peopleFullyVaccinated\r\n                    ],\r\n                    type: \"area\",\r\n                },\r\n                zoom: {\r\n                    enabled: true\r\n                },\r\n                axis: {\r\n                    x: {\r\n                        label: {\r\n                            text: 'Vaccination days',\r\n                            position: 'outer-center'\r\n                        },\r\n                        type: 'timeseries',\r\n                        tick: {\r\n                            format: function (x) { return dateFormat(x, \"dd/mm/yyyy\"); },\r\n                            fit: true,\r\n                            values: dates,\r\n                            rotate: 75,\r\n                            multiline: false\r\n                        },\r\n                        height: 130\r\n                    },\r\n                    y: {\r\n                        label: {\r\n                            text: 'Number of people',\r\n                            position: 'outer-center'\r\n                        },\r\n                        padding: { top: 100, bottom: 100 }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }, [countryData]);\r\n\r\n    return (\r\n        <div className=\"pt-5 row\" id=\"chart\" />\r\n    );\r\n\r\n};\r\n\r\nexport default Chart;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport WorldMap from './components/WorldMap';\nimport VaccinationData from './components/VaccinationData'\nimport DailyInformations from './components/DailyInformations'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as Constants from './utils/Constants';\nimport Chart from \"./components/Chart\";\n\n\nfunction App() {\n\n  const [currentDate, setStartDate] = useState(new Date());\n  const [currentCountryData, setCountryData] = useState();\n  var selectedCountry;\n  var vaccinationData = []\n\n  const handleCountrySelectedCallback = (country, isSelected) => {\n    selectedCountry = country;\n\n    if (selectedCountry === undefined || isSelected === false) {\n      setCountryData([])\n\n    } else {\n\n      var countryData = vaccinationData.filter((rawData) => selectedCountry\n        .toLowerCase()\n        .replace(/ /g, \"\")\n        .includes(rawData.data[Constants.COUNTRY_NAME_COLUMN_INDEX].toLowerCase().replace(/ /g, \"\"))).map(it => it.data);\n\n      setCountryData(countryData)\n    }\n  }\n\n  const handleCountryDataCallback = (data) => {\n    vaccinationData = data;\n  }\n\n\n  return (\n    <div className=\"App p-3\">\n      <div className=\"appContent\">\n        <WorldMap parentSelectedCountryCallback={handleCountrySelectedCallback}></WorldMap>\n        <VaccinationData parentCountryDataCallback={handleCountryDataCallback}></VaccinationData>\n        <div className=\"row justify-content-center\">\n          <h1 className=\"col-4 mt-5\"> Pick a date</h1>\n          <DatePicker selected={currentDate} onChange={(date) => setStartDate(date)} className=\"date-picker col-8 mt-5\" />\n        </div>\n        <DailyInformations countryData={currentCountryData} currentDate={currentDate}> </DailyInformations>\n        <Chart countryData={currentCountryData}> </Chart>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}