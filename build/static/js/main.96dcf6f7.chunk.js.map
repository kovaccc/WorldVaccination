{"version":3,"sources":["components/WorldMap.js","utils/Constants.js","data/country_vaccinations.csv","components/VaccinationData.js","components/DailyInformations.js","components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["Map","countriesForDateData","centered","parentSelectedCountryCallback","currentDate","currentVaccinationData","svgRef","useRef","tooltipRef","countryNames","width","height","projection","d3","scale","translate","path","opacityCountries","domain","range","formatedDate","dateFormat","clicked","d","x","y","k","g","select","current","centroid","selectAll","classed","call","e","id","transition","duration","attr","style","useEffect","remove","undefined","filter","rawData","data","svg","tooltip","append","on","Promise","all","then","world","names","countries","topojson","objects","features","forEach","i","name","enter","length","value","country","toLowerCase","replace","includes","map","it","finalArrayData","opacityValue","Math","round","getCountryOpacity","this","html","datum","a","b","catch","err","console","log","className","ref","VaccinationData","parentCountryDataCallback","vaccinationData","Papa","parse","csvFile","download","step","row","push","complete","DailyInformations","countryData","filteredCountryData","Array","fill","noDataAavailableString","find","fontWeight","Chart","dates","totalVaccinations","peopleVaccinated","peopleFullyVaccinated","concat","datesData","React","c3","generate","size","bindto","columns","type","zoom","enabled","axis","label","text","position","tick","format","fit","values","rotate","multiline","padding","top","bottom","App","selectedCountry","useState","Date","setStartDate","currentCountryData","setCountryData","setVaccinationData","isSelected","WorldMap","selected","onChange","date","updateDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96dcf6f7.chunk.js","sourcesContent":["import React, { Component, useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\nimport * as d3 from \"d3\";\r\nimport * as topojson from \"topojson\";\r\nimport dateFormat from \"dateformat\";\r\nimport * as Constants from '../utils/Constants';\r\n\r\nconst Map = ({ parentSelectedCountryCallback, currentDate, currentVaccinationData }) => {\r\n\r\n    const svgRef = useRef();\r\n    const tooltipRef = useRef();\r\n    var countryNames = [];\r\n    var countriesForDateData;\r\n\r\n    const width = 1000;\r\n    const height = 900;\r\n    var centered;\r\n\r\n    var projection = d3.geoMercator().scale(150)\r\n        .translate([width / 2, height / 2]);\r\n\r\n    var path = d3.geoPath(projection);\r\n\r\n    var opacityCountries = d3.scaleLinear().domain([0, 100]).range([0.55, 1])\r\n\r\n    var formatedDate = dateFormat(currentDate, \"yyyy-mm-dd\");\r\n\r\n\r\n    function getCountryOpacity(d) {\r\n\r\n        if (countriesForDateData === undefined || countriesForDateData.length == 0 || d === undefined) {\r\n\r\n        } else {\r\n\r\n            let value = countriesForDateData.filter(country =>\r\n                d.toLowerCase()\r\n                    .replace(/ /g, \"\")\r\n                    .includes(country.data[Constants.COUNTRY_NAME_COLUMN_INDEX].toLowerCase().replace(/ /g, \"\"))).map(it => it.data); // country data \r\n\r\n            if (value === undefined || value.length == 0 || value == false) {\r\n\r\n            } else {\r\n                let finalArrayData = value[0] // get first or only element that are matching name \r\n                let opacityValue = Math.round(finalArrayData[Constants.TOTAL_VACCIONATIONS_PER_HUNDRED_INDEX])\r\n\r\n                if (opacityValue === 0 || opacityValue === undefined) { } else { return opacityCountries(opacityValue) }\r\n            }\r\n        }\r\n\r\n        return 0.2; // if no data presented for total vaccinations \r\n    }\r\n\r\n    function clicked(d) { //https://bl.ocks.org/mbostock/2206590\r\n        var x, y, k;\r\n\r\n        var svg = select(svgRef.current);\r\n        const g = svg.select('#mapGroup');\r\n\r\n        if (d && centered !== d) {\r\n            var centroid = path.centroid(d);\r\n            x = centroid[0];\r\n            y = centroid[1];\r\n            k = 4;\r\n            centered = d;\r\n        } else {\r\n            x = width / 2;\r\n            y = height / 2;\r\n            k = 1;\r\n            centered = null;\r\n        }\r\n\r\n\r\n        g.selectAll(\"path\")\r\n            .classed(\"active\", centered && function (d) { return d === centered; })\r\n            .call(function (e) {\r\n                if (centered && function (d) { return d === centered; })\r\n                    parentSelectedCountryCallback(countryNames[d.id], true);\r\n                else {\r\n                    parentSelectedCountryCallback(countryNames[d.id], false);\r\n                }\r\n            });\r\n\r\n        g.transition()\r\n            .duration(750)\r\n            .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")scale(\" + k + \")translate(\" + -x + \",\" + -y + \")\")\r\n            .style(\"stroke-width\", 1.5 / k + \"px\");\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => { // https://reactjs.org/docs/hooks-intro.html \r\n\r\n        d3.selectAll(\"svg > *\").remove(); // clear svg to draw new one \r\n\r\n\r\n        if (currentVaccinationData !== undefined) {\r\n            countriesForDateData = currentVaccinationData.filter((rawData) =>\r\n                formatedDate == rawData.data[Constants.DATE_COLUMN_INDEX]);\r\n        } // get data of all countries for current selected date\r\n\r\n\r\n        var svg = select(svgRef.current);\r\n        var tooltip = select(tooltipRef.current);\r\n\r\n        svg.append(\"rect\")\r\n            .attr(\"id\", \"mapBackground\")\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height)\r\n            .on(\"click\", clicked);\r\n\r\n        var g = svg.append('g').attr(\"id\", \"mapGroup\");\r\n\r\n\r\n        Promise.all([\r\n            d3.json(\"https://cdn.rawgit.com/mbostock/4090846/raw/d534aba169207548a8a3d670c9c2cc719ff05c47/world-110m.json\"),\r\n            d3.tsv(\"https://cdn.rawgit.com/mbostock/4090846/raw/d534aba169207548a8a3d670c9c2cc719ff05c47/world-country-names.tsv\"),\r\n        ]).then(([world, names]) => {\r\n\r\n            var countries = topojson.feature(world, world.objects.countries).features;\r\n\r\n            //map country names to IDs used on map\r\n            names.forEach(function (i) {\r\n                countryNames[i.id] = i.name;\r\n            });\r\n\r\n\r\n            g.append(\"g\")\r\n                .attr(\"class\", \"country\")\r\n                .selectAll(\".country\")\r\n                .data(countries)\r\n                .enter().append('path')\r\n                .attr(\"d\", path)\r\n                .attr(\"id\", function (d) { return d.id; })\r\n                .style(\"opacity\", function (d) { return getCountryOpacity(countryNames[d.id]) })\r\n                .on('click', function (e, d) {\r\n                    clicked(d);\r\n                }).on(\"mouseover\", function (e, d) {\r\n                    d3.select(this).attr(\"fill\", \"grey\").attr(\"stroke-width\", 2)\r\n                    return tooltip.classed(\"hidden\", false).html(countryNames[d.id]); // https://blockbuilder.org/abrahamdu/50147e692857054c2bf88c443946e8a5\r\n                })\r\n                .on(\"mousemove\", function (e, d) {\r\n                    tooltip.classed(\"hidden\", false)\r\n                        .style(\"top\", (e.y) + \"px\")\r\n                        .style(\"left\", (e.x + 10) + \"px\")\r\n                        .html(countryNames[d.id]);\r\n                })\r\n                .on(\"mouseout\", function (e, d) {\r\n                    d3.select(this).attr(\"fill\", \"red\").attr(\"stroke-width\", 1)\r\n                    tooltip.classed(\"hidden\", true);\r\n                });\r\n\r\n            g.append(\"path\")\r\n                .datum(topojson.mesh(world, world.objects.countries, function (a, b) { return a !== b; }))\r\n                .attr(\"id\", \"country-borders\")\r\n                .attr(\"d\", path);\r\n\r\n\r\n        }).catch(err => console.log('Error loading or parsing data.'))\r\n\r\n    }, [currentDate, currentVaccinationData]);\r\n\r\n    return (\r\n        <div className=\"mapContainer\">\r\n            <svg ref={svgRef} width={width} height={height} className=\"worldMap\"> </svg>\r\n            <div ref={tooltipRef} className=\"mapTooltip\"></div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Map;","export const COUNTRY_NAME_COLUMN_INDEX = 0;\r\nexport const ISO_CODE_COLUMN_INDEX = 1;\r\nexport const DATE_COLUMN_INDEX = 2;\r\nexport const TOTAL_VACCINATIONS_INDEX = 3;\r\nexport const PEOPLE_VACCINATED_INDEX = 4;\r\nexport const PEOPLE_FULLY_VACCINATED_INDEX = 5;\r\nexport const DAILY_VACCINATIONS_RAW_INDEX = 6;\r\nexport const DAILY_VACCINATIONS_INDEX = 7;\r\nexport const TOTAL_VACCIONATIONS_PER_HUNDRED_INDEX = 8;\r\nexport const PEOPLE_VACCINATED_PER_HUNDRED_INDEX = 9;\r\nexport const PEOPLE_FULLY_VACCINATED_PER_HUNDRED_INDEX = 10;\r\nexport const DAILY_VACCINATIONS_PER_MILLION_INDEX = 11;\r\nexport const VACCINES_INDEX = 12;\r\nexport const SOURCE_NAME_INDEX = 13;\r\nexport const SOURCE_WEBSITE_INDEX = 14;\r\n\r\nexport const COUNTRY_NAME_COLUMN = \"Country: \";\r\nexport const ISO_CODE_COLUMN = \"Iso: \";\r\nexport const DATE_COLUMN = \"Date: \";\r\nexport const TOTAL_VACCINATIONS = \"Total vaccinations: \";\r\nexport const PEOPLE_VACCINATED = \"People vaccinated: \";\r\nexport const PEOPLE_FULLY_VACCINATED = \"People fully vaccinated: \";\r\nexport const DAILY_VACCINATIONS_RAW = \"Daily vaccinations raw: \";\r\nexport const DAILY_VACCINATIONS = \"Daily vaccinations: \";\r\nexport const TOTAL_VACCIONATIONS_PER_HUNDRED = \"Total vaccinations per hundred (in percent): \";\r\nexport const PEOPLE_VACCINATED_PER_HUNDRED = \"People vaccinated per hundred (in percent): \";\r\nexport const PEOPLE_FULLY_VACCINATED_PER_HUNDRED = \"People fully vaccinated per hundred (in percent): \";\r\nexport const DAILY_VACCINATIONS_PER_MILLION = \"Daily vaccinations per million (in ppm): \";\r\nexport const VACCINES = \"Vaccines: \";\r\nexport const SOURCE_NAME = \"Source name: \";\r\nexport const SOURCE_WEBSITE = \"Source website: \";\r\nexport const NO_DATA_AVAILABLE = \"No data for \";","export default __webpack_public_path__ + \"static/media/country_vaccinations.1225a9ef.csv\";","import csvFile from '../data/country_vaccinations.csv'\r\nimport React, { useEffect } from \"react\";\r\nimport Papa from 'papaparse/papaparse.min';\r\n\r\nconst VaccinationData = ({ parentCountryDataCallback }) => {\r\n\r\n    useEffect(() => {\r\n\r\n        var vaccinationData = [];\r\n\r\n        Papa.parse(csvFile, { // https://www.kaggle.com/gpreda/covid-world-vaccination-progress  \r\n            download: true,\r\n            step: function (row) {\r\n                vaccinationData.push(row)\r\n            },\r\n            complete: function () {\r\n                parentCountryDataCallback(vaccinationData)\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div></div>\r\n    );\r\n}\r\n\r\nexport default VaccinationData;\r\n","import dateFormat from \"dateformat\";\r\nimport * as Constants from '../utils/Constants';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from \"react\";\r\nconst DailyInformations = ({ countryData, currentDate }) => {\r\n\r\n    var formatedDate = dateFormat(currentDate, \"yyyy-mm-dd\");\r\n\r\n    var filteredCountryData = new Array(15).fill(\" \");\r\n\r\n    if (countryData === undefined || countryData.length === 0) {\r\n        filteredCountryData = new Array(15).fill(\" \")\r\n    }\r\n    else {\r\n        filteredCountryData = countryData.find((data) => data[Constants.DATE_COLUMN_INDEX] === formatedDate) // find first that matches date \r\n        if (filteredCountryData === undefined || filteredCountryData.length === 0) {\r\n            filteredCountryData = new Array(15).fill(\"\")\r\n        }\r\n    }\r\n\r\n    function noDataAavailableString() {\r\n        return Constants.NO_DATA_AVAILABLE + formatedDate\r\n    }\r\n\r\n    return (\r\n        <div className=\"row mt-5 countryDailyInformations\">\r\n            <h2 className=\"col-6 ml-3 mb-4\">Daily information</h2>\r\n            <div className=\"col-12 daily-informations-preview\">\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.COUNTRY_NAME_COLUMN}</span>{filteredCountryData[Constants.COUNTRY_NAME_COLUMN_INDEX] ? filteredCountryData[Constants.COUNTRY_NAME_COLUMN_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.ISO_CODE_COLUMN}</span> {filteredCountryData[Constants.ISO_CODE_COLUMN_INDEX] ? filteredCountryData[Constants.ISO_CODE_COLUMN_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.DATE_COLUMN}</span> {filteredCountryData[Constants.DATE_COLUMN_INDEX] ? filteredCountryData[Constants.DATE_COLUMN_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.TOTAL_VACCINATIONS}</span> {filteredCountryData[Constants.TOTAL_VACCINATIONS_INDEX] ? filteredCountryData[Constants.TOTAL_VACCINATIONS_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.PEOPLE_VACCINATED}</span> {filteredCountryData[Constants.PEOPLE_VACCINATED_INDEX] ? filteredCountryData[Constants.PEOPLE_VACCINATED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.PEOPLE_FULLY_VACCINATED}</span> {filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_INDEX] ? filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.DAILY_VACCINATIONS_RAW}</span> {filteredCountryData[Constants.DAILY_VACCINATIONS_RAW_INDEX] ? filteredCountryData[Constants.DAILY_VACCINATIONS_RAW_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.DAILY_VACCINATIONS}</span> {filteredCountryData[Constants.DAILY_VACCINATIONS_INDEX] ? filteredCountryData[Constants.DAILY_VACCINATIONS_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.TOTAL_VACCIONATIONS_PER_HUNDRED}</span> {filteredCountryData[Constants.TOTAL_VACCIONATIONS_PER_HUNDRED_INDEX] ? filteredCountryData[Constants.TOTAL_VACCIONATIONS_PER_HUNDRED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.PEOPLE_VACCINATED_PER_HUNDRED}</span> {filteredCountryData[Constants.PEOPLE_VACCINATED_PER_HUNDRED_INDEX] ? filteredCountryData[Constants.PEOPLE_VACCINATED_PER_HUNDRED_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.PEOPLE_FULLY_VACCINATED_PER_HUNDRED}</span> {filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_PER_HUNDRED_INDEX] ? filteredCountryData[Constants.PEOPLE_FULLY_VACCINATED_PER_HUNDRED_INDEX]  : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.DAILY_VACCINATIONS_PER_MILLION}</span> {filteredCountryData[Constants.DAILY_VACCINATIONS_PER_MILLION_INDEX] ? filteredCountryData[Constants.DAILY_VACCINATIONS_PER_MILLION_INDEX]  : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.VACCINES}</span> {filteredCountryData[Constants.VACCINES_INDEX] ? filteredCountryData[Constants.VACCINES_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.SOURCE_NAME}</span> {filteredCountryData[Constants.SOURCE_NAME_INDEX] ? filteredCountryData[Constants.SOURCE_NAME_INDEX] : noDataAavailableString()} </p>\r\n                <p> <span style={{fontWeight: \"bold\"}}> {Constants.SOURCE_WEBSITE}</span> {filteredCountryData[Constants.SOURCE_WEBSITE_INDEX] ? filteredCountryData[Constants.SOURCE_WEBSITE_INDEX] : noDataAavailableString()} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DailyInformations;","import React from \"react\";\r\nimport c3 from \"c3\";\r\nimport * as Constants from '../utils/Constants';\r\nimport 'c3/c3.css';\r\nimport dateFormat from \"dateformat\";\r\n\r\nconst Chart = ({ countryData }) => {\r\n\r\n    if (countryData !== undefined) {\r\n\r\n        var filteredCountryData = countryData // get only country data where parameters below exists\r\n            .filter(data =>\r\n                data[Constants.TOTAL_VACCINATIONS_INDEX] !== \"\" &&\r\n                data[Constants.TOTAL_VACCINATIONS_INDEX] !== undefined &&\r\n                data[Constants.PEOPLE_VACCINATED_INDEX] !== \"\" &&\r\n                data[Constants.PEOPLE_VACCINATED_INDEX] !== undefined &&\r\n                data[Constants.PEOPLE_FULLY_VACCINATED_INDEX] !== \"\" &&\r\n                data[Constants.PEOPLE_FULLY_VACCINATED_INDEX] !== undefined\r\n            )\r\n\r\n        var dates = filteredCountryData.map(countryData => countryData[Constants.DATE_COLUMN_INDEX])\r\n\r\n        var totalVaccinations = filteredCountryData\r\n            .map(data => data[Constants.TOTAL_VACCINATIONS_INDEX])\r\n\r\n        var peopleVaccinated = filteredCountryData\r\n            .map(data => data[Constants.PEOPLE_VACCINATED_INDEX])\r\n\r\n        var peopleFullyVaccinated = filteredCountryData\r\n            .map(data => data[Constants.PEOPLE_FULLY_VACCINATED_INDEX])\r\n\r\n\r\n        totalVaccinations = [\"Total vaccinations\"].concat(totalVaccinations)\r\n        peopleVaccinated = [\"People vaccinated\"].concat(peopleVaccinated)\r\n        peopleFullyVaccinated = [\"People fully vaccinated\"].concat(peopleFullyVaccinated)\r\n        var datesData = [\"x\"].concat(dates)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (countryData !== undefined) {\r\n            c3.generate({ // https://c3js.org/examples.html\r\n                size: {\r\n                    height: 600\r\n                },\r\n                bindto: \"#chart\",\r\n                data: {\r\n                    x: 'x',\r\n                    columns: [\r\n                        datesData,\r\n                        totalVaccinations,\r\n                        peopleVaccinated,\r\n                        peopleFullyVaccinated\r\n                    ],\r\n                    type: \"area\",\r\n                },\r\n                zoom: {\r\n                    enabled: true\r\n                },\r\n                axis: {\r\n                    x: {\r\n                        label: {\r\n                            text: 'Vaccination days',\r\n                            position: 'outer-center'\r\n                        },\r\n                        type: 'timeseries',\r\n                        tick: {\r\n                            format: function (x) { return dateFormat(x, \"dd/mm/yyyy\"); },\r\n                            fit: true,\r\n                            values: dates,\r\n                            rotate: 75,\r\n                            multiline: false\r\n                        },\r\n                        height: 130\r\n                    },\r\n                    y: {\r\n                        label: {\r\n                            text: 'Number of people',\r\n                            position: 'outer-center'\r\n                        },\r\n                        padding: { top: 100, bottom: 100 }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    }, [countryData]);\r\n\r\n    return (\r\n        <div className=\"pt-5 row\" id=\"chart\" />\r\n    );\r\n\r\n};\r\n\r\nexport default Chart;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport WorldMap from './components/WorldMap';\nimport VaccinationData from './components/VaccinationData'\nimport DailyInformations from './components/DailyInformations'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as Constants from './utils/Constants';\nimport Chart from \"./components/Chart\";\n\n\nfunction App() {\n\n  const [currentDate, setStartDate] = useState(new Date());\n  const [currentCountryData, setCountryData] = useState();\n  const [currentVaccinationData, setVaccinationData] = useState();\n  var selectedCountry;\n\n  async function handleCountrySelectedCallback (country, isSelected) {\n    selectedCountry = country;\n\n    if (selectedCountry === undefined || isSelected === false) {\n      setCountryData([])\n\n    } else {\n\n      var countryData = currentVaccinationData.filter((rawData) => selectedCountry\n        .toLowerCase()\n        .replace(/ /g, \"\")\n        .includes(rawData.data[Constants.COUNTRY_NAME_COLUMN_INDEX].toLowerCase().replace(/ /g, \"\"))).map(it => it.data);\n\n      setCountryData(countryData)\n    }\n  }\n\n\n  async function handleCountryDataCallback (data) {\n    setVaccinationData(data)\n  }\n\n  const updateDate = (date)=> {\n    setStartDate(date);\n    setCountryData([]);\n  };\n // https://getbootstrap.com/docs/4.0/layout/grid/ \n  return (\n    <div className=\"App p-3\">\n      <div className=\"appContent\">\n        <WorldMap parentSelectedCountryCallback={handleCountrySelectedCallback} currentDate={currentDate} currentVaccinationData={currentVaccinationData}></WorldMap>\n        <VaccinationData parentCountryDataCallback={handleCountryDataCallback}></VaccinationData>\n        <div className=\"row justify-content-center\">\n          <h1 className=\"col-6 mt-5\"> Pick a date</h1> \n          <DatePicker selected={currentDate} onChange={(date) => updateDate(date)} className=\"date-picker col-6 mt-5\" />\n        </div>\n        <DailyInformations countryData={currentCountryData} currentDate={currentDate}> </DailyInformations>\n        <Chart countryData={currentCountryData}> </Chart>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}